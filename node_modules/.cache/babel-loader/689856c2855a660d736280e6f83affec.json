{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SUGGESTED_EVALUATE = exports.DEFAULT_ESCAPE = exports.DEFAULT_INTERPOLATE = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _merge = require('lodash/merge');\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nvar _template = require('lodash/template');\n\nvar _template2 = _interopRequireDefault(_template);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n} // Default lodash templates regexs\n// https://regex101.com/r/ce27tA/5\n\n\nvar DEFAULT_INTERPOLATE = exports.DEFAULT_INTERPOLATE = /{{{([^\\{\\}#][\\s\\S]+?)}}}/g; // https://regex101.com/r/8sRC8b/8\n\nvar DEFAULT_ESCAPE = exports.DEFAULT_ESCAPE = /{{([^\\{\\}#][\\s\\S]+?)}}/g; // https://regex101.com/r/ndDqxg/4\n\nvar SUGGESTED_EVALUATE = exports.SUGGESTED_EVALUATE = /{{#([^\\{\\}].*?)}}/g;\n\nvar MessageBox = function () {\n  function MessageBox() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        escape = _ref.escape,\n        evaluate = _ref.evaluate,\n        initialLanguage = _ref.initialLanguage,\n        interpolate = _ref.interpolate,\n        messages = _ref.messages,\n        tracker = _ref.tracker;\n\n    _classCallCheck(this, MessageBox);\n\n    this.language = initialLanguage || MessageBox.language || 'en';\n    this.messageList = messages || {};\n\n    if (tracker) {\n      this.tracker = tracker;\n      this.trackerDep = new tracker.Dependency();\n    } // Template options\n\n\n    this.interpolate = interpolate || MessageBox.interpolate || DEFAULT_INTERPOLATE;\n    this.evaluate = evaluate || MessageBox.evaluate;\n    this.escape = escape || MessageBox.escape || DEFAULT_ESCAPE;\n  }\n\n  _createClass(MessageBox, [{\n    key: 'clone',\n    value: function clone() {\n      var copy = new MessageBox({\n        escape: this.escape,\n        evaluate: this.evaluate,\n        initialLanguage: this.language,\n        interpolate: this.interpolate,\n        tracker: this.tracker\n      });\n      copy.messages(this.messageList);\n      return copy;\n    }\n  }, {\n    key: 'getMessages',\n    value: function getMessages(language) {\n      if (!language) {\n        language = this.language;\n        if (this.trackerDep) this.trackerDep.depend();\n      }\n\n      var globalMessages = MessageBox.messages[language];\n      var messages = this.messageList[language];\n\n      if (messages) {\n        if (globalMessages) messages = (0, _merge2.default)({}, globalMessages, messages);\n      } else {\n        messages = globalMessages;\n      }\n\n      if (!messages) throw new Error('No messages found for language \"' + language + '\"');\n      return {\n        messages: messages,\n        language: language\n      };\n    }\n  }, {\n    key: 'message',\n    value: function message(errorInfo) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          context = _ref2.context,\n          language = _ref2.language; // Error objects can optionally include a preformatted message,\n      // in which case we use that.\n\n\n      if (errorInfo.message) return errorInfo.message;\n      var fieldName = errorInfo.name;\n      var genericName = MessageBox.makeNameGeneric(fieldName);\n\n      var _getMessages = this.getMessages(language),\n          messages = _getMessages.messages;\n\n      var message = messages[errorInfo.type];\n\n      var fullContext = _extends({\n        genericName: genericName\n      }, context, errorInfo);\n\n      if (message && (typeof message === 'undefined' ? 'undefined' : _typeof(message)) === 'object') message = message[genericName] || message._default; // eslint-disable-line no-underscore-dangle\n\n      if (typeof message === 'string') {\n        message = (0, _template2.default)(message, {\n          interpolate: this.interpolate,\n          evaluate: this.evaluate,\n          escape: this.escape\n        });\n      }\n\n      if (typeof message !== 'function') return fieldName + ' is invalid';\n      return message(fullContext);\n    }\n  }, {\n    key: 'messages',\n    value: function messages(_messages) {\n      (0, _merge2.default)(this.messageList, _messages);\n    }\n  }, {\n    key: 'setLanguage',\n    value: function setLanguage(language) {\n      this.language = language;\n      if (this.trackerDep) this.trackerDep.changed();\n    }\n  }], [{\n    key: 'makeNameGeneric',\n    value: function makeNameGeneric(name) {\n      if (typeof name !== 'string') return null;\n      return name.replace(/\\.[0-9]+(?=\\.|$)/g, '.$');\n    }\n  }, {\n    key: 'defaults',\n    value: function defaults() {\n      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          escape = _ref3.escape,\n          evaluate = _ref3.evaluate,\n          initialLanguage = _ref3.initialLanguage,\n          interpolate = _ref3.interpolate,\n          messages = _ref3.messages;\n\n      if (typeof initialLanguage === 'string') MessageBox.language = initialLanguage;\n      if (interpolate instanceof RegExp) MessageBox.interpolate = interpolate;\n      if (evaluate instanceof RegExp) MessageBox.evaluate = evaluate;\n      if (escape instanceof RegExp) MessageBox.escape = escape;\n\n      if (messages) {\n        if (!MessageBox.messages) MessageBox.messages = {};\n        (0, _merge2.default)(MessageBox.messages, messages);\n      }\n    }\n  }]);\n\n  return MessageBox;\n}();\n\nMessageBox.messages = {};\nexports.default = MessageBox;","map":null,"metadata":{},"sourceType":"script"}