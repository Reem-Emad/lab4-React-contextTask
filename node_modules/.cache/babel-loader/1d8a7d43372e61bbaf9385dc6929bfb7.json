{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getPositionsForAutoValue;\n\nvar _mongoObject = require('mongo-object');\n\nvar _mongoObject2 = _interopRequireDefault(_mongoObject);\n\nvar _utility = require('../utility');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * A position is a place in the object where this field exists.\n * If no arrays are involved, then every field/key has at most 1 position.\n * If arrays are involved, then a field could have potentially unlimited positions.\n *\n * For example, the key 'a.b.$.c` would have these positions:\n *   `a[b][0][c]`\n *   `a[b][1][c]`\n *   `a[b][2][c]`\n *\n * For this object:\n * {\n *   a: {\n *     b: [\n *       { c: 1 },\n *       { c: 1 },\n *       { c: 1 },\n *     ],\n *   },\n * }\n *\n * To make matters more complicated, we want to include not only the existing positions\n * but also the positions that might exist due to their parent object existing or their\n * parent object being auto-created by a MongoDB modifier that implies it.\n */\n\n\nfunction getPositionsForAutoValue(_ref) {\n  var fieldName = _ref.fieldName,\n      isModifier = _ref.isModifier,\n      mongoObject = _ref.mongoObject; // Positions for this field\n\n  var positions = mongoObject.getPositionsInfoForGenericKey(fieldName); // If the field is an object and will be created by MongoDB,\n  // we don't need (and can't have) a value for it\n\n  if (isModifier && mongoObject.getPositionsThatCreateGenericKey(fieldName).length > 0) {\n    return positions;\n  } // For simple top-level fields, just add an undefined would-be position\n  // if there isn't a real position.\n\n\n  if (fieldName.indexOf('.') === -1 && positions.length === 0) {\n    positions.push({\n      key: fieldName,\n      value: undefined,\n      operator: isModifier ? '$set' : null,\n      position: isModifier ? '$set[' + fieldName + ']' : fieldName\n    });\n    return positions;\n  }\n\n  var parentPath = (0, _utility.getParentOfKey)(fieldName);\n  var lastPart = (0, _utility.getLastPartOfKey)(fieldName, parentPath);\n  var lastPartWithBraces = lastPart.replace(/\\./g, '][');\n  var parentPositions = mongoObject.getPositionsInfoForGenericKey(parentPath);\n\n  if (parentPositions.length) {\n    parentPositions.forEach(function (info) {\n      var childPosition = info.position + '[' + lastPartWithBraces + ']';\n\n      if (!positions.find(function (i) {\n        return i.position === childPosition;\n      })) {\n        positions.push({\n          key: info.key + '.' + lastPart,\n          value: undefined,\n          operator: info.operator,\n          position: childPosition\n        });\n      }\n    });\n  } else if (parentPath.slice(-2) !== '.$') {\n    // positions that will create parentPath\n    mongoObject.getPositionsThatCreateGenericKey(parentPath).forEach(function (info) {\n      var operator = info.operator,\n          position = info.position;\n      var wouldBePosition = void 0;\n\n      if (operator) {\n        var next = position.slice(position.indexOf('[') + 1, position.indexOf(']'));\n        var nextPieces = next.split('.');\n        var newPieces = [];\n        var newKey = void 0;\n\n        while (nextPieces.length && newKey !== parentPath) {\n          newPieces.push(nextPieces.shift());\n          newKey = newPieces.join('.');\n        }\n\n        newKey = newKey + '.' + fieldName.slice(newKey.length + 1);\n        wouldBePosition = '$set[' + newKey + ']';\n      } else {\n        var lastPart2 = (0, _utility.getLastPartOfKey)(fieldName, parentPath);\n        var lastPartWithBraces2 = lastPart2.replace(/\\./g, '][');\n        wouldBePosition = position.slice(0, position.lastIndexOf('[')) + '[' + lastPartWithBraces2 + ']';\n      }\n\n      if (!positions.find(function (i) {\n        return i.position === wouldBePosition;\n      })) {\n        positions.push({\n          key: _mongoObject2.default._positionToKey(wouldBePosition),\n          value: undefined,\n          operator: operator ? '$set' : null,\n          position: wouldBePosition\n        });\n      }\n    });\n  }\n\n  return positions;\n}","map":null,"metadata":{},"sourceType":"script"}