{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = doNumberChecks;\n\nvar _SimpleSchema = require('../../SimpleSchema'); // Polyfill to support IE11\n\n\nNumber.isInteger = Number.isInteger || function isInteger(value) {\n  return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n};\n\nfunction doNumberChecks(def, keyValue, op, expectsInteger) {\n  // Is it a valid number?\n  if (typeof keyValue !== 'number' || isNaN(keyValue)) {\n    return {\n      type: _SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE,\n      dataType: expectsInteger ? 'Integer' : 'Number'\n    };\n  } // Assuming we are not incrementing, is the value less than the maximum value?\n\n\n  if (op !== '$inc' && def.max !== null && (!!def.exclusiveMax ? def.max <= keyValue : def.max < keyValue)) {\n    return {\n      type: !!def.exclusiveMax ? _SimpleSchema.SimpleSchema.ErrorTypes.MAX_NUMBER_EXCLUSIVE : _SimpleSchema.SimpleSchema.ErrorTypes.MAX_NUMBER,\n      max: def.max\n    };\n  } // Assuming we are not incrementing, is the value more than the minimum value?\n\n\n  if (op !== '$inc' && def.min !== null && (!!def.exclusiveMin ? def.min >= keyValue : def.min > keyValue)) {\n    return {\n      type: !!def.exclusiveMin ? _SimpleSchema.SimpleSchema.ErrorTypes.MIN_NUMBER_EXCLUSIVE : _SimpleSchema.SimpleSchema.ErrorTypes.MIN_NUMBER,\n      min: def.min\n    };\n  } // Is it an integer if we expect an integer?\n\n\n  if (expectsInteger && !Number.isInteger(keyValue)) {\n    return {\n      type: _SimpleSchema.SimpleSchema.ErrorTypes.MUST_BE_INTEGER\n    };\n  }\n}","map":null,"metadata":{},"sourceType":"script"}