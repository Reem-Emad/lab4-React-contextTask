{"ast":null,"code":"import _classCallCheck from \"E:\\\\ITI\\\\React\\\\lab4\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\ITI\\\\React\\\\lab4\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"E:\\\\ITI\\\\React\\\\lab4\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"E:\\\\ITI\\\\React\\\\lab4\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"E:\\\\ITI\\\\React\\\\lab4\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"E:\\\\ITI\\\\React\\\\lab4\\\\app\\\\src\\\\components\\\\Task\\\\Task.js\";\nimport React from 'react';\nimport { Card } from \"react-bootstrap\";\nimport { Button } from \"react-bootstrap\";\nimport { MyContext } from '../../App';\n\nvar Task =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(Task, _React$PureComponent);\n\n  function Task() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Task);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Task)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleComplete = function (data, updateData) {\n      return function (e) {\n        // this.setState({ btnTxt: 'Undone' });\n        // this.setState({DoneTasks: data.slice()});\n        // debugger;\n        var copy = data.slice();\n        copy.forEach(function (t) {\n          if (t.id === e.currentTarget.dataset.id) {\n            //    if(t.completed==false)\n            //    {\n            //     t.completed=true;\n            //    }\n            t.completed = !t.completed;\n          }\n        });\n        updateData(copy); // return {...state, doingTasks:copyState};\n        // this.props.completeTask(e.currentTarget.dataset.id);\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(Task, [{\n    key: \"handleDelete\",\n    // constructor(props) {\n    //     super(props);\n    //     this.state = {\n    //         DoneTasks: []\n    //     }\n    //     // this.handleDelete = this.handleDelete.bind(this);\n    //     // this.handleComplete = this.handleComplete.bind(this);\n    // }\n    value: function handleDelete(e) {\n      // this.setState({ showDone: false });\n      var copy = data.slice();\n      copy.forEach(function (t) {\n        if (t.id === e.currentTarget.dataset.id) {\n          //    if(t.completed==false)\n          //    {\n          //     t.completed=true;\n          //    }\n          t.deleted = !t.deleted;\n        }\n      });\n      updateData(copy);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          body = _this$props.body,\n          id = _this$props.id;\n      var Donebtntxt = this.props.completed ? 'Undo' : 'Done';\n      var Deletebtntxt = this.props.deleted ? 'Undelete' : 'Delete';\n      return React.createElement(MyContext.Consumer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, function (value) {\n        return React.createElement(React.Fragment, null, React.createElement(Card, {\n          className: \"Task_card\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, React.createElement(Card.Body, {\n          style: {\n            display: 'flex'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }, React.createElement(Card.Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, body), !_this2.props.deleted && React.createElement(Button, {\n          variant: \"primary\",\n          className: \"Task_btn\",\n          style: {\n            backgroundColor: '#328A3B',\n            borderColor: '#328A3B'\n          },\n          \"data-id\": id,\n          onClick: _this2.handleComplete(value.state.data, value.updateData),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }, Donebtntxt), React.createElement(Button, {\n          variant: \"primary\",\n          className: \"Task_btn\",\n          style: {\n            backgroundColor: '#D93738',\n            borderColor: '#D93738'\n          },\n          \"data-id\": id,\n          onClick: _this2.handleDelete(value.state.data, value.updateData),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, Deletebtntxt))));\n      });\n    }\n  }]);\n\n  return Task;\n}(React.PureComponent);\n\nexport default Task;","map":{"version":3,"sources":["E:\\ITI\\React\\lab4\\app\\src\\components\\Task\\Task.js"],"names":["React","Card","Button","MyContext","Task","handleComplete","data","updateData","e","copy","slice","forEach","t","id","currentTarget","dataset","completed","deleted","props","body","Donebtntxt","Deletebtntxt","value","display","backgroundColor","borderColor","state","handleDelete","PureComponent"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Card } from \"react-bootstrap\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { MyContext } from '../../App';\r\n\r\n\r\nclass Task extends React.PureComponent {\r\n\r\n\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.state = {\r\n    //         DoneTasks: []\r\n    //     }\r\n    //     // this.handleDelete = this.handleDelete.bind(this);\r\n    //     // this.handleComplete = this.handleComplete.bind(this);\r\n\r\n\r\n    // }\r\n\r\n    handleDelete(e) {\r\n        // this.setState({ showDone: false });\r\n        const copy=data.slice();\r\n        copy.forEach(t => {\r\n          if(t.id===e.currentTarget.dataset.id)\r\n          {\r\n        //    if(t.completed==false)\r\n        //    {\r\n        //     t.completed=true;\r\n        //    }\r\n        t.deleted=!t.deleted;\r\n          }\r\n        });\r\n        \r\n        updateData(copy);\r\n\r\n    }\r\n    handleComplete= (data,updateData) => (e) => {\r\n        // this.setState({ btnTxt: 'Undone' });\r\n        // this.setState({DoneTasks: data.slice()});\r\n        // debugger;\r\n        const copy=data.slice();\r\n        copy.forEach(t => {\r\n          if(t.id===e.currentTarget.dataset.id)\r\n          {\r\n        //    if(t.completed==false)\r\n        //    {\r\n        //     t.completed=true;\r\n        //    }\r\n        t.completed=!t.completed;\r\n          }\r\n        });\r\n        \r\n        updateData(copy);\r\n\r\n        // return {...state, doingTasks:copyState};\r\n        // this.props.completeTask(e.currentTarget.dataset.id);\r\n    }\r\n    render() {\r\n\r\n        const { body, id } = this.props;\r\n        const Donebtntxt = this.props.completed ? 'Undo' : 'Done';\r\n        const Deletebtntxt = this.props.deleted ? 'Undelete' : 'Delete';\r\n\r\n        return (\r\n            <MyContext.Consumer>\r\n                {value =>\r\n                    (\r\n\r\n                        <>\r\n                            <Card className=\"Task_card\">\r\n                                <Card.Body style={{ display: 'flex' }}>\r\n                                    <Card.Text >{body}</Card.Text>\r\n                                    {!this.props.deleted && <Button variant=\"primary\" className=\"Task_btn\" style={{ backgroundColor: '#328A3B', borderColor: '#328A3B' }} data-id={id} onClick={this.handleComplete(value.state.data,value.updateData)}>{Donebtntxt}</Button>}\r\n                                    <Button variant=\"primary\" className=\"Task_btn\" style={{ backgroundColor: '#D93738', borderColor: '#D93738' }} data-id={id}  onClick={this.handleDelete(value.state.data,value.updateData)} >{Deletebtntxt}</Button>\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </>\r\n                    )\r\n                }\r\n            </MyContext.Consumer>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default Task;\r\n"]},"metadata":{},"sourceType":"module"}