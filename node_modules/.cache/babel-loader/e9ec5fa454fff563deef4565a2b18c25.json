{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = requiredValidator;\n\nvar _SimpleSchema = require('../SimpleSchema');\n\nvar _utility = require('../utility'); // Check for missing required values. The general logic is this:\n// * If the operator is $unset or $rename, it's invalid.\n// * If the value is null, it's invalid.\n// * If the value is undefined and one of the following are true, it's invalid:\n//     * We're validating a key of a sub-object.\n//     * We're validating a key of an object that is an array item.\n//     * We're validating a document (as opposed to a modifier).\n//     * We're validating a key under the $set operator in a modifier, and it's an upsert.\n\n\nfunction requiredValidator() {\n  var definition = this.definition,\n      isInArrayItemObject = this.isInArrayItemObject,\n      isInSubObject = this.isInSubObject,\n      key = this.key,\n      obj = this.obj,\n      operator = this.operator,\n      value = this.value;\n  var optional = definition.optional;\n  if (optional) return; // If value is null, no matter what, we add required\n\n  if (value === null) return _SimpleSchema.SimpleSchema.ErrorTypes.REQUIRED; // If operator would remove, we add required\n\n  if (operator === '$unset' || operator === '$rename') return _SimpleSchema.SimpleSchema.ErrorTypes.REQUIRED; // The rest of these apply only if the value is undefined\n\n  if (value !== undefined) return; // At this point, if it's a normal, non-modifier object, then a missing value is an error\n\n  if (!operator) return _SimpleSchema.SimpleSchema.ErrorTypes.REQUIRED; // Everything beyond this point deals with modifier objects only\n  // We can skip the required check for keys that are ancestors of those in $set or\n  // $setOnInsert because they will be created by MongoDB while setting.\n\n  var keysWithValueInSet = (0, _utility.getKeysWithValueInObj)(obj.$set, key);\n  if (keysWithValueInSet.length) return;\n  var keysWithValueInSetOnInsert = (0, _utility.getKeysWithValueInObj)(obj.$setOnInsert, key);\n  if (keysWithValueInSetOnInsert.length) return; // In the case of $set and $setOnInsert, the value may be undefined here\n  // but it is set in another operator. So check that first.\n\n  var fieldInfo = this.field(key);\n  if (fieldInfo.isSet && fieldInfo.value !== null) return; // Required if in an array or sub object\n\n  if (isInArrayItemObject || isInSubObject) return _SimpleSchema.SimpleSchema.ErrorTypes.REQUIRED; // If we've got this far with an undefined $set or $setOnInsert value, it's a required error.\n\n  if (operator === '$set' || operator === '$setOnInsert') return _SimpleSchema.SimpleSchema.ErrorTypes.REQUIRED;\n}","map":null,"metadata":{},"sourceType":"script"}