{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _mongoObject = require('mongo-object');\n\nvar _mongoObject2 = _interopRequireDefault(_mongoObject);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Clones a schema object, expanding shorthand as it does it.\n */\n\n\nfunction expandShorthand(schema) {\n  var schemaClone = {};\n  Object.keys(schema).forEach(function (key) {\n    var definition = schema[key]; // CASE 1: Not shorthand. Just clone\n\n    if (_mongoObject2.default.isBasicObject(definition)) {\n      schemaClone[key] = _extends({}, definition);\n      return;\n    } // CASE 2: The definition is an array of some type\n\n\n    if (Array.isArray(definition)) {\n      if (Array.isArray(definition[0])) {\n        throw new Error('Array shorthand may only be used to one level of depth (' + key + ')');\n      }\n\n      var type = definition[0];\n      schemaClone[key] = {\n        type: Array\n      }; // Also add the item key definition\n\n      var itemKey = key + '.$';\n\n      if (schema[itemKey]) {\n        throw new Error('Array shorthand used for ' + key + ' field but ' + key + '.$ key is already in the schema');\n      }\n\n      if (type instanceof RegExp) {\n        schemaClone[itemKey] = {\n          type: String,\n          regEx: type\n        };\n      } else {\n        schemaClone[itemKey] = {\n          type: type\n        };\n      }\n\n      return;\n    } // CASE 3: The definition is a regular expression\n\n\n    if (definition instanceof RegExp) {\n      schemaClone[key] = {\n        type: String,\n        regEx: definition\n      };\n      return;\n    } // CASE 4: The definition is something, a type\n\n\n    schemaClone[key] = {\n      type: definition\n    };\n  });\n  return schemaClone;\n}\n\nexports.default = expandShorthand;","map":null,"metadata":{},"sourceType":"script"}