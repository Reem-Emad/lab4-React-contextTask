{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = typeValidator;\n\nvar _SimpleSchema = require('../../SimpleSchema');\n\nvar _doDateChecks = require('./doDateChecks');\n\nvar _doDateChecks2 = _interopRequireDefault(_doDateChecks);\n\nvar _doNumberChecks = require('./doNumberChecks');\n\nvar _doNumberChecks2 = _interopRequireDefault(_doNumberChecks);\n\nvar _doStringChecks = require('./doStringChecks');\n\nvar _doStringChecks2 = _interopRequireDefault(_doStringChecks);\n\nvar _doArrayChecks = require('./doArrayChecks');\n\nvar _doArrayChecks2 = _interopRequireDefault(_doArrayChecks);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction typeValidator() {\n  if (!this.valueShouldBeChecked) return;\n  var def = this.definition;\n  var expectedType = def.type;\n  var keyValue = this.value;\n  var op = this.operator;\n  if (expectedType === String) return (0, _doStringChecks2.default)(def, keyValue);\n  if (expectedType === Number) return (0, _doNumberChecks2.default)(def, keyValue, op, false);\n  if (expectedType === _SimpleSchema.SimpleSchema.Integer) return (0, _doNumberChecks2.default)(def, keyValue, op, true);\n\n  if (expectedType === Boolean) {\n    // Is it a boolean?\n    if (typeof keyValue === 'boolean') return;\n    return {\n      type: _SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE,\n      dataType: 'Boolean'\n    };\n  }\n\n  if (expectedType === Object || _SimpleSchema.SimpleSchema.isSimpleSchema(expectedType)) {\n    // Is it an object?\n    if (keyValue === Object(keyValue) && !(keyValue instanceof Date)) return;\n    return {\n      type: _SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE,\n      dataType: 'Object'\n    };\n  }\n\n  if (expectedType === Array) return (0, _doArrayChecks2.default)(def, keyValue);\n\n  if (expectedType instanceof Function) {\n    // Generic constructor checks\n    if (!(keyValue instanceof expectedType)) return {\n      type: _SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE,\n      dataType: expectedType.name\n    }; // Date checks\n\n    if (expectedType === Date) return (0, _doDateChecks2.default)(def, keyValue);\n  }\n}","map":null,"metadata":{},"sourceType":"script"}