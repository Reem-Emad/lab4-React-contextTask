{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _regExp = require('./regExp');\n\nvar _regExp2 = _interopRequireDefault(_regExp);\n\nvar _lodash = require('lodash.find');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar regExpMessages = [{\n  exp: _regExp2.default.Email,\n  msg: 'must be a valid email address'\n}, {\n  exp: _regExp2.default.EmailWithTLD,\n  msg: 'must be a valid email address'\n}, {\n  exp: _regExp2.default.Domain,\n  msg: 'must be a valid domain'\n}, {\n  exp: _regExp2.default.WeakDomain,\n  msg: 'must be a valid domain'\n}, {\n  exp: _regExp2.default.IP,\n  msg: 'must be a valid IPv4 or IPv6 address'\n}, {\n  exp: _regExp2.default.IPv4,\n  msg: 'must be a valid IPv4 address'\n}, {\n  exp: _regExp2.default.IPv6,\n  msg: 'must be a valid IPv6 address'\n}, {\n  exp: _regExp2.default.Url,\n  msg: 'must be a valid URL'\n}, {\n  exp: _regExp2.default.Id,\n  msg: 'must be a valid alphanumeric ID'\n}, {\n  exp: _regExp2.default.ZipCode,\n  msg: 'must be a valid ZIP code'\n}, {\n  exp: _regExp2.default.Phone,\n  msg: 'must be a valid phone number'\n}];\nvar defaultMessages = {\n  initialLanguage: 'en',\n  messages: {\n    en: {\n      required: '{{{label}}} is required',\n      minString: '{{{label}}} must be at least {{min}} characters',\n      maxString: '{{{label}}} cannot exceed {{max}} characters',\n      minNumber: '{{{label}}} must be at least {{min}}',\n      maxNumber: '{{{label}}} cannot exceed {{max}}',\n      minNumberExclusive: '{{{label}}} must be greater than {{min}}',\n      maxNumberExclusive: '{{{label}}} must be less than {{max}}',\n      minDate: '{{{label}}} must be on or after {{min}}',\n      maxDate: '{{{label}}} cannot be after {{max}}',\n      badDate: '{{{label}}} is not a valid date',\n      minCount: 'You must specify at least {{minCount}} values',\n      maxCount: 'You cannot specify more than {{maxCount}} values',\n      noDecimal: '{{{label}}} must be an integer',\n      notAllowed: '{{{value}}} is not an allowed value',\n      expectedType: '{{{label}}} must be of type {{dataType}}',\n      regEx: function regEx(_ref) {\n        var label = _ref.label,\n            regExp = _ref.regExp; // See if there's one where exp matches this expression\n\n        var msgObj = void 0;\n\n        if (regExp) {\n          msgObj = (0, _lodash2.default)(regExpMessages, function (o) {\n            return o.exp && o.exp.toString() === regExp;\n          });\n        }\n\n        var regExpMessage = msgObj ? msgObj.msg : 'failed regular expression validation';\n        return label + ' ' + regExpMessage;\n      },\n      keyNotInSchema: '{{name}} is not allowed by the schema'\n    }\n  }\n};\nexports.default = defaultMessages;","map":null,"metadata":{},"sourceType":"script"}